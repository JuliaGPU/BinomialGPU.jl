Variables
  #self#::Core.Const(BinomialGPU.kernel_BTRS!)
  A::CuDeviceMatrix{Int64, 1}
  count::CuDeviceVector{Int64, 1}
  prob::CuDeviceMatrix{Float32, 1}
  seed::UInt32
  counter::UInt32
  R1::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}
  R2::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}
  Rp::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}
  Ra::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}
  count_dim_larger_than_prob_dim::Bool
  val@_12::Union{}
  offset::Union{}
  window::Union{}
  tid::Union{}
  device_rng::Random.MersenneTwister
  val@_17::Union{}
  val@_18::Union{}
  val@_19::Union{}
  val@_20::Union{}
  val@_21::Union{}
  val@_22::Union{}
  val@_23::Union{}
  val@_24::Union{}
  val@_25::Union{}
  k::Union{}
  ks::Union{}
  m::Union{}
  alpha::Union{}
  v_r::Union{}
  c::Union{}
  a::Union{}
  b::Union{}
  stddev::Union{}
  s::Union{}
  r::Union{}
  p::Union{}
  invert::Union{}
  geom_sum::Union{}
  logp::Union{}
  ctr::Union{}
  n::Union{}
  I2::Union{}
  I1::Union{}
  Ip::Union{}
  I::Union{}
  i::Union{}
  geom::Union{}
  ub::Union{}
  v2::Union{}
  us::Union{}
  vsample::Union{}
  usample::Union{}

Body::Union{}
1 ─ %1 = Base.getproperty(BinomialGPU.Random, :default_rng)::Core.Const(Random.default_rng)
│        (device_rng = (%1)())
│        $(Expr(:inbounds, true))
│   %4 = Base.getproperty(BinomialGPU.Random, :seed!)::Core.Const(Random.seed!)
│   %5 = device_rng::Random.MersenneTwister
│        (val@_12 = (%4)(%5, seed, counter))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_12))
│        Core.Const(:(BinomialGPU.threadIdx()))
│        Core.Const(:(tid = Base.getproperty(%9, :x)))
│        Core.Const(:(BinomialGPU.blockDim()))
│        Core.Const(:(Base.getproperty(%11, :x)))
│        Core.Const(:(1 * BinomialGPU.i32))
│        Core.Const(:(%12 - %13))
│        Core.Const(:(BinomialGPU.gridDim()))
│        Core.Const(:(Base.getproperty(%15, :x)))
│        Core.Const(:(window = %14 * %16))
│        Core.Const(:(BinomialGPU.blockIdx()))
│        Core.Const(:(Base.getproperty(%18, :x)))
│        Core.Const(:(1 * BinomialGPU.i32))
│        Core.Const(:(%19 - %20))
│        Core.Const(:(BinomialGPU.blockDim()))
│        Core.Const(:(Base.getproperty(%22, :x)))
│        Core.Const(:(offset = %21 * %23))
│        Core.Const(:(offset))
│        Core.Const(:(BinomialGPU.length(A)))
│        Core.Const(:(%25 < %26))
│        Core.Const(:(Core.typeassert(%27, Core.Bool)))
│        Core.Const(Core.NewvarNode(:(val@_17)))
│        Core.Const(Core.NewvarNode(:(val@_18)))
│        Core.Const(Core.NewvarNode(:(val@_19)))
│        Core.Const(Core.NewvarNode(:(val@_20)))
│        Core.Const(Core.NewvarNode(:(val@_21)))
│        Core.Const(Core.NewvarNode(:(val@_22)))
│        Core.Const(Core.NewvarNode(:(val@_23)))
│        Core.Const(Core.NewvarNode(:(val@_24)))
│        Core.Const(Core.NewvarNode(:(val@_25)))
│        Core.Const(Core.NewvarNode(:(k)))
│        Core.Const(Core.NewvarNode(:(ks)))
│        Core.Const(Core.NewvarNode(:(m)))
│        Core.Const(Core.NewvarNode(:(alpha)))
│        Core.Const(Core.NewvarNode(:(v_r)))
│        Core.Const(Core.NewvarNode(:(c)))
│        Core.Const(Core.NewvarNode(:(a)))
│        Core.Const(Core.NewvarNode(:(b)))
│        Core.Const(Core.NewvarNode(:(stddev)))
│        Core.Const(Core.NewvarNode(:(s)))
│        Core.Const(Core.NewvarNode(:(r)))
│        Core.Const(Core.NewvarNode(:(p)))
│        Core.Const(Core.NewvarNode(:(invert)))
│        Core.Const(Core.NewvarNode(:(geom_sum)))
│        Core.Const(Core.NewvarNode(:(logp)))
│        Core.Const(Core.NewvarNode(:(ctr)))
│        Core.Const(Core.NewvarNode(:(n)))
│        Core.Const(Core.NewvarNode(:(I2)))
│        Core.Const(Core.NewvarNode(:(I1)))
│        Core.Const(Core.NewvarNode(:(Ip)))
│        Core.Const(Core.NewvarNode(:(I)))
│        Core.Const(:(i = tid + offset))
│        Core.Const(:(i))
│        Core.Const(:(BinomialGPU.length(A)))
│        Core.Const(:(%60 <= %61))
│        Core.Const(:(Core.typeassert(%62, Core.Bool)))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.getindex(Ra, i)))
│        Core.Const(:(I = %65))
│        Core.Const(:(val@_25 = %65))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_25))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.getindex(I, 1)))
│        Core.Const(:(Base.getindex(Rp, %71)))
│        Core.Const(:(Ip = %72))
│        Core.Const(:(val@_24 = %72))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_24))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.getindex(Ip, 1)))
│        Core.Const(:(Base.getindex(R1, %78)))
│        Core.Const(:(I1 = %79))
│        Core.Const(:(val@_23 = %79))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_23))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.getindex(Ip, 2)))
│        Core.Const(:(Base.getindex(R2, %85)))
│        Core.Const(:(I2 = %86))
│        Core.Const(:(val@_22 = %86))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_22))
│        Core.Const(:(Core.typeassert(count_dim_larger_than_prob_dim, Core.Bool)))
│        $(Expr(:inbounds, true))
│        Core.Const(:(BinomialGPU.CartesianIndex(I1, I2)))
│        Core.Const(:(Base.getindex(count, %93)))
│        Core.Const(:(n = %94))
│        Core.Const(:(val@_21 = %94))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_21))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.getindex(prob, I1)))
│        Core.Const(:(p = %100))
│        Core.Const(:(val@_20 = %100))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_20))
│        Core.Const(:(goto %119))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.getindex(count, I1)))
│        Core.Const(:(n = %107))
│        Core.Const(:(val@_19 = %107))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_19))
│        $(Expr(:inbounds, true))
│        Core.Const(:(BinomialGPU.CartesianIndex(I1, I2)))
│        Core.Const(:(Base.getindex(prob, %113)))
│        Core.Const(:(p = %114))
│        Core.Const(:(val@_18 = %114))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_18))
│        Core.Const(:(goto %122))
│        Core.Const(:(n = 0))
│        Core.Const(:(p = 0))
│        Core.Const(:(p <= 0))
│        Core.Const(:(Core.typeassert(%122, Core.Bool)))
│        Core.Const(:(goto %127))
│        Core.Const(:(n <= 0))
│        Core.Const(:(Core.typeassert(%125, Core.Bool)))
│        Core.Const(:(k = 0))
│        Core.Const(:(goto %276))
│        Core.Const(:(p >= 1))
│        Core.Const(:(Core.typeassert(%129, Core.Bool)))
│        Core.Const(:(k = n))
│        Core.Const(:(goto %276))
│        Core.Const(:(n <= 17))
│        Core.Const(:(Core.typeassert(%133, Core.Bool)))
│        Core.Const(:(k = 0))
│        Core.Const(:(ctr = 1))
│        Core.Const(:(ctr <= n))
│        Core.Const(:(Core.typeassert(%137, Core.Bool)))
│        Core.Const(:(BinomialGPU.rand(BinomialGPU.Float32)))
│        Core.Const(:(%139 < p))
│        Core.Const(:(Core.typeassert(%140, Core.Bool)))
│        Core.Const(:(k = k + 1))
│        Core.Const(:(goto %144))
│        Core.Const(:(ctr = ctr + 1))
│        Core.Const(:(goto %137))
│        Core.Const(:(goto %276))
│        Core.Const(:(n * p))
│        Core.Const(:(%147 < 10.0f0))
│        Core.Const(:(Core.typeassert(%148, Core.Bool)))
│        Core.Const(:(Base.getproperty(BinomialGPU.CUDA, :log)))
│        Core.Const(:(1.0f0 - p))
│        Core.Const(:(logp = (%150)(%151)))
│        Core.Const(:(geom_sum = 0.0f0))
│        Core.Const(:(k = 0))
│        Core.Const(:(Core.typeassert(true, Core.Bool)))
│        Core.Const(:(Base.getproperty(BinomialGPU.CUDA, :log)))
│        Core.Const(:(BinomialGPU.rand(BinomialGPU.Float32)))
│        Core.Const(:((%156)(%157)))
│        Core.Const(:(%158 / logp))
│        Core.Const(:(geom = BinomialGPU.ceil(%159)))
│        Core.Const(:(geom_sum = geom_sum + geom))
│        Core.Const(:(geom_sum > n))
│        Core.Const(:(Core.typeassert(%162, Core.Bool)))
│        Core.Const(:(goto %167))
│        Core.Const(:(k = k + 1))
│        Core.Const(:(goto %155))
│        Core.Const(:(goto %276))
│        Core.Const(:(p > 0.5f0))
│        Core.Const(:(invert = %168))
│        Core.Const(:(Core.typeassert(%168, Core.Bool)))
│        Core.Const(:(p = 1.0f0 - p))
│        Core.Const(:(goto %173))
│        Core.Const(:(p))
│        Core.Const(:(1.0f0 - p))
│        Core.Const(:(r = %173 / %174))
│        Core.Const(:(p))
│        Core.Const(:(1.0f0 - p))
│        Core.Const(:(s = %176 * %177))
│        Core.Const(:(n * s))
│        Core.Const(:(stddev = BinomialGPU.sqrt(%179)))
│        Core.Const(:(2.53f0 * stddev))
│        Core.Const(:(b = 1.15f0 + %181))
│        Core.Const(:(0.0248f0 * b))
│        Core.Const(:(0.01f0 * p))
│        Core.Const(:(a = -0.0873f0 + %183 + %184))
│        Core.Const(:(n * p))
│        Core.Const(:(c = %186 + 0.5f0))
│        Core.Const(:(4.2f0 / b))
│        Core.Const(:(v_r = 0.92f0 - %188))
│        Core.Const(:(5.1f0 / b))
│        Core.Const(:(2.83f0 + %190))
│        Core.Const(:(alpha = %191 * stddev))
│        Core.Const(:(n + 1))
│        Core.Const(:(%193 * p))
│        Core.Const(:(m = BinomialGPU.floor(%194)))
│        Core.Const(:(ks = 0.0f0))
│        Core.Const(:(Core.typeassert(true, Core.Bool)))
│        Core.Const(Core.NewvarNode(:(ub)))
│        Core.Const(Core.NewvarNode(:(v2)))
│        Core.Const(:(BinomialGPU.rand(BinomialGPU.Float32)))
│        Core.Const(:(usample = %200 - 0.5f0))
│        Core.Const(:(vsample = BinomialGPU.rand(BinomialGPU.Float32)))
│        Core.Const(:(BinomialGPU.abs(usample)))
│        Core.Const(:(us = 0.5f0 - %203))
│        Core.Const(:(2 * a))
│        Core.Const(:(%205 / us))
│        Core.Const(:(%206 + b))
│        Core.Const(:(%207 * usample))
│        Core.Const(:(%208 + c))
│        Core.Const(:(ks = BinomialGPU.floor(%209)))
│        Core.Const(:(us >= 0.07f0))
│        Core.Const(:(Core.typeassert(%211, Core.Bool)))
│        Core.Const(:(vsample <= v_r))
│        Core.Const(:(Core.typeassert(%213, Core.Bool)))
│        Core.Const(:(goto %272))
│        Core.Const(:(ks < 0))
│        Core.Const(:(Core.typeassert(%216, Core.Bool)))
│        Core.Const(:(goto %221))
│        Core.Const(:(ks > n))
│        Core.Const(:(Core.typeassert(%219, Core.Bool)))
│        Core.Const(:(goto %271))
│        Core.Const(:(Base.getproperty(BinomialGPU.CUDA, :log)))
│        Core.Const(:(vsample * alpha))
│        Core.Const(:(a))
│        Core.Const(:(us * us))
│        Core.Const(:(%224 / %225))
│        Core.Const(:(%226 + b))
│        Core.Const(:(%223 / %227))
│        Core.Const(:(v2 = (%222)(%228)))
│        Core.Const(:(m + 0.5f0))
│        Core.Const(:(Base.getproperty(BinomialGPU.CUDA, :log)))
│        Core.Const(:(m + 1))
│        Core.Const(:(r))
│        Core.Const(:(n - m))
│        Core.Const(:(%234 + 1))
│        Core.Const(:(%233 * %235))
│        Core.Const(:(%232 / %236))
│        Core.Const(:((%231)(%237)))
│        Core.Const(:(%230 * %238))
│        Core.Const(:(n + 1))
│        Core.Const(:(Base.getproperty(BinomialGPU.CUDA, :log)))
│        Core.Const(:(n - m))
│        Core.Const(:(%242 + 1))
│        Core.Const(:(n - ks))
│        Core.Const(:(%244 + 1))
│        Core.Const(:(%243 / %245))
│        Core.Const(:((%241)(%246)))
│        Core.Const(:(%240 * %247))
│        Core.Const(:(ks + 0.5f0))
│        Core.Const(:(Base.getproperty(BinomialGPU.CUDA, :log)))
│        Core.Const(:(r))
│        Core.Const(:(n - ks))
│        Core.Const(:(%252 + 1))
│        Core.Const(:(%251 * %253))
│        Core.Const(:(ks + 1))
│        Core.Const(:(%254 / %255))
│        Core.Const(:((%250)(%256)))
│        Core.Const(:(%249 * %257))
│        Core.Const(:(BinomialGPU.stirling_approx_tail(m)))
│        Core.Const(:(n - m))
│        Core.Const(:(BinomialGPU.stirling_approx_tail(%260)))
│        Core.Const(:(%239 + %248 + %258 + %259 + %261))
│        Core.Const(:(BinomialGPU.stirling_approx_tail(ks)))
│        Core.Const(:(%262 - %263))
│        Core.Const(:(n - ks))
│        Core.Const(:(BinomialGPU.stirling_approx_tail(%265)))
│        Core.Const(:(ub = %264 - %266))
│        Core.Const(:(v2 <= ub))
│        Core.Const(:(Core.typeassert(%268, Core.Bool)))
│        Core.Const(:(goto %272))
│        Core.Const(:(goto %197))
│        Core.Const(:(Core.typeassert(invert, Core.Bool)))
│        Core.Const(:(ks = n - ks))
│        Core.Const(:(goto %275))
│        Core.Const(:(k = BinomialGPU.Int(ks)))
│        Core.Const(:(i))
│        Core.Const(:(BinomialGPU.length(A)))
│        Core.Const(:(%276 <= %277))
│        Core.Const(:(Core.typeassert(%278, Core.Bool)))
│        $(Expr(:inbounds, true))
│        Core.Const(:(Base.setindex!(A, k, i)))
│        Core.Const(:(val@_17 = k))
│        $(Expr(:inbounds, :pop))
│        Core.Const(:(val@_17))
│        Core.Const(:(offset = offset + window))
│        Core.Const(:(goto %25))
└──      Core.Const(:(return BinomialGPU.nothing))
